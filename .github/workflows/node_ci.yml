# This workflow runs unit tests for the Node.js backend.
name: Node.js CI

# Triggers the workflow on pushes to the main branch
on:
  push:
    branches: [ "main" ]

jobs:
  build:
    # Use the latest Ubuntu runner hosted by GitHub
    runs-on: ubuntu-latest

    # Set up the execution environment
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      # Configure Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Recommended stable Node.js version

      # Install dependencies using 'npm ci' for clean, consistent builds
      - name: Install dependencies (npm ci)
        run: npm ci

      # --- FINAL FIX: Install Babel and Configure Jest for ultimate ESM/CJS compatibility ---
      # This step installs the necessary packages and configures Jest to use Babel
      # to handle all the mixed ES Module (import) and CommonJS (require) syntax.
      - name: Configure Jest with Babel for Module Resolution
        run: |
          # 1. Install Babel dependencies needed for Jest
          npm install --save-dev babel-jest @babel/core @babel/preset-env
          
          # 2. Create a simple .babelrc file to tell Babel how to transpile modern JS
          echo '{ "presets": [ ["@babel/preset-env", { "targets": { "node": "current" } }] ] }' > .babelrc
          
          # 3. Create jest.config.cjs to tell Jest to use the Babel transformer. 
          # The .cjs extension explicitly tells Node to use CommonJS for this config file, 
          # fixing the 'ReferenceError: module is not defined' crash.
          echo "module.exports = { testEnvironment: 'node', transform: {}, moduleNameMapper: { '^(\\.{1,2}/.*)\\.js$': '$1' } };" > jest.config.cjs

      # Run the automated unit tests
      - name: Run tests (npm test)
        # This command runs the script defined in package.json: "test": "jest"
        run: npm test


